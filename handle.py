import fitz  # PyMuPDF
import urllib.request
import json
from io import BytesIO

def handle(data):
    try:
        # üìå –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        pdf_url = data.get("pdf_url")
        api_url = data.get("api_url")
        access_token = data.get("access_token")
        acc_id = data.get("acc_id")

        if not all([pdf_url, api_url, access_token, acc_id]):
            return {"error": "Missing required parameters: pdf_url, api_url, access_token, acc_id"}

        # üîπ –°–∫–∞—á–∏–≤–∞–µ–º PDF –≤ –ø–∞–º—è—Ç—å
        print("‚è≥ –°–∫–∞—á–∏–≤–∞–µ–º PDF –≤ –ø–∞–º—è—Ç—å...")
        req = urllib.request.Request(pdf_url, method="GET")
        with urllib.request.urlopen(req) as response:
            if response.status != 200:
                return {"error": f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF: {response.status}"}
            pdf_bytes = BytesIO(response.read())

        # üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        doc = fitz.open("pdf", pdf_bytes.getvalue())  # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–∞–º—è—Ç–∏
        image_bytes = None

        for page_num in range(len(doc)):
            for img_index, img in enumerate(doc[page_num].get_images(full=True)):
                xref = img[0]
                base_image = doc.extract_image(xref)
                image_bytes = base_image["image"]
                break  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if image_bytes:
                break

        if not image_bytes:
            return {"error": "–§–æ—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ PDF"}

        # üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ API
        print("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ API...")
        req = urllib.request.Request(f"{api_url}/{acc_id}", method="POST")
        req.add_header("Authorization", f"Bearer {access_token}")
        req.add_header("Content-Type", "multipart/form-data; boundary=----WebKitFormBoundary")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º multipart —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        boundary = "----WebKitFormBoundary"
        body = (
            f"--{boundary}\r\n"
            f'Content-Disposition: form-data; name="file"; filename="candidate_photo.jpg"\r\n'
            f"Content-Type: image/jpeg\r\n\r\n"
        ).encode() + image_bytes + f"\r\n--{boundary}--\r\n".encode()

        req.data = body
        req.add_header("Content-Length", str(len(body)))

        with urllib.request.urlopen(req) as response:
            api_response = json.loads(response.read().decode())

        return {"result": "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", "api_response": api_response}

    except Exception as e:
        return {"error": str(e)}
